8/25:

Installed nodejs, got a web server. Researched how to share code between client and server and then got bored so decided to write game logic.

First try, started defining tiles based on edges. Immediately realized this won't work because different tiles can have the same edge (city on opposite edges, or city bridging two edges). Going to try and define edges and connections instead. Will probably implement abbots as "tile features". No idea how I'm going to implement fields - will probably have to split the tile into 8 edges and define connections.

The set of all possible carcassone tiles is pretty neat - see https://boardgamegeek.com/filepage/53516/all-rest-possible-carcassonne-tiles-p1-6

In any case, looking at http://mlab.taik.fi/~apaterso/projects/si/resources/carc_all-tile-distribution-sheets_by_zac-toups.pdf this system _should_ support any tile combination using vanilla Carcassonne rules.

--

Added all tile types, minimal testing.

Roadmap:
1. Add GameBoard class (very simple 2d array w/ basic validation)
2. Aquire tile images
3. Add simple renderer for gameboard (someday we probably want webgl, but for now splitting out divs or a table is fine)
4. Make GameBoard class able to expand in any direction
5. Somewhere in here add tile rotation

8/26:

Inline asserts are the best.

> [0,1] + [2,2]
"0,12,2"

Okay, javascript.

Tile placement logic _appears_ to work, other than not requiring a single adjacent tile. Next step is to add vis so I can generate a large city and visually validate that everything hooks up correctly.

I really don't want to do this. I need to figure out shared client/server logic for javascript.

---

Set up webpack. Appears to work, but we will see how things are once I get client/server running.

Got basic display working for tiles. It's really kludged, but at least it's working.

Tomorrow's tasks: add all the images, work on generating a 20x20 random board.

8/27:

Got all the images, fixed some errors in tile definitions, everything looks great now.

Generating row by row looks a little unnatural. Two issues - tile distribution is wrong, and tile placement is done in rows. Next step is to keep a free list and generate on that.

---

I can see the need for a Point2D object soon.

Added more realistic tile placement. Starts from starter tile and randomly draws new tiles to insert.

Generation with 1000+ tiles works but is kind of slow. 300ms

Most of generation time is spent finding free spots for tiles. For _large_ maps I will likely need to move from maintaining one free list to maintaining a map of edge combination -> free list.

---

Added base tile distribution. Autoplacement of tiles is now realisitic. App will now use tetris style grab bag of tiles.